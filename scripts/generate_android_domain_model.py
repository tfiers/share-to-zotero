from paths import *
from datetime import datetime
import json
from inflection import underscore
from dataclasses import dataclass

with open(timestamp_file) as f:
    download_timestamp = f.read()


def read(json_file):
    with open(json_file) as f:
        obj = json.load(f)
    return obj


indent = 4 * " "

# Collate all fields
item_type_fields = read(item_type_fields_file)
special_fields = {"creators", "tags", "collections", "relations", "itemType"}
all_fields = set()
for fields in item_type_fields.values():
    all_fields |= set(fields)
simple_fields = sorted(list(all_fields - special_fields), key=str.lower)


def as_constant(camel_case_string: str) -> str:
    return underscore(camel_case_string).upper()


@dataclass
class EnumEntry:
    camel_case_name: str
    friendly_name: str

    @property
    def constant_name(self):
        return as_constant(self.camel_case_name)

    def __str__(self):
        return (
            indent
            + f'{self.constant_name}("{self.camel_case_name}", "{self.friendly_name}")'
        )

    def __lt__(self, other: "EnumEntry") -> bool:
        return self.constant_name < other.constant_name


@dataclass
class CreatorTypeEnumEntry(EnumEntry):
    item_type: str

    @property
    def item_type_ref(self):
        return as_constant(self.item_type)

    @property
    def constant_name(self):
        return f"{self.item_type_ref}_{super().constant_name}"

    def __str__(self):
        return super().__str__()[:-1] + f", ItemType.{self.item_type_ref}" + ")"


item_type_enum_entries = sorted(
    [
        EnumEntry(
            camel_case_name=obj["itemType"], friendly_name=obj["localized"]
        )
        for obj in (
            read(item_types_file)
            + [{"itemType": "attachment", "localized": "Attachment"}]
        )
    ]
)

field_enum_entries = sorted(
    [
        EnumEntry(camel_case_name=obj["field"], friendly_name=obj["localized"])
        for obj in (
            read(fields_file)
            + [
                {"field": "itemType", "localized": "Item Type"},
                {"field": "dateAdded", "localized": "Date Added"},
                {"field": "dateModified", "localized": "Modified"},
                {"field": "creators", "localized": "Creators"},
                {"field": "tags", "localized": "Tags"},
                {"field": "collections", "localized": "Collections"},
                {"field": "relations", "localized": "Rollections"},
                {"field": "note", "localized": "Note"},
            ]
        )
    ]
)

creator_types_enum_entries = sorted(
    [
        CreatorTypeEnumEntry(
            item_type=item_type,
            camel_case_name=obj["creatorType"],
            friendly_name=obj["localized"],
        )
        for item_type, creators in read(creator_types_file).items()
        for obj in creators
    ]
)

newline = "\n"
list_sep = ",\n"

item_type_fields_source_strings = []
for item_type, fields in item_type_fields.items():
    item_type_ref = as_constant(item_type)
    fields += ["dateAdded", "dateModified"]
    field_refs = [as_constant(field) for field in fields]
    source = newline.join(
        [
            indent + f"ItemType.{item_type_ref} to listOf(",
            list_sep.join(
                [2 * indent + f"Field.{field_ref}" for field_ref in field_refs]
            ),
            indent + ")",
        ]
    )
    item_type_fields_source_strings.append(source)


source_code = f"""
// Generated by `scripts/generate_android_domain_model.py` on {datetime.now():%Y-%m-%d %H:%M:%S}
// using Zotero domain model downloaded on {download_timestamp}.

@file:Suppress("unused", "UNUSED_PARAMETER")

package net.tomasfiers.zoro.data

open class ItemMixin {{
{newline.join([indent + f"var {field}: String? = null" for field in simple_fields])}
}}

enum class ItemType(camelCaseName: String, friendlyName: String) {{
{list_sep.join(map(str, item_type_enum_entries))}
}}

enum class Field(camelCaseName: String, friendlyName: String) {{
{list_sep.join(map(str, field_enum_entries))}
}}

enum class CreatorType(camelCaseName: String, friendlyName: String, itemType: ItemType) {{
{list_sep.join(map(str, creator_types_enum_entries))}
}}

val itemTypeFields = mapOf<ItemType, List<Field>>(
{list_sep.join(item_type_fields_source_strings)}
)
""".lstrip()
# Note double `{{` to escape `{` in f-string.

with open(android_domain_file, "w") as f:
    f.write(source_code)

print("Done")
