from paths import *
from datetime import datetime
import json
from inflection import underscore
from dataclasses import dataclass

with open(timestamp_file) as f:
    download_timestamp = f.read()


def read(json_file):
    with open(json_file) as f:
        obj = json.load(f)
    return obj


# Collate all fields
item_type_fields = read(item_type_fields_file)
special_fields = {"creators", "tags", "collections", "relations"}
all_fields = set()
for fields in item_type_fields.values():
    all_fields |= set(fields)
simple_fields = sorted(list(all_fields - special_fields), key=str.lower)


@dataclass
class EnumEntry:
    camel_case_name: str
    friendly_name: str

    @staticmethod
    def _as_constant(camel_case_string: str) -> str:
        return underscore(camel_case_string).upper()

    @property
    def constant_name(self):
        return self._as_constant(self.camel_case_name)

    def __str__(self):
        return f'    {self.constant_name}("{self.camel_case_name}", "{self.friendly_name}")'

    def __lt__(self, other: "EnumEntry") -> bool:
        return self.constant_name < other.constant_name


@dataclass
class CreatorTypeEnumEntry(EnumEntry):
    item_type: str

    @property
    def item_type_ref(self):
        return self._as_constant(self.item_type)

    @property
    def constant_name(self):
        return f"{self.item_type_ref}__{super().constant_name}"

    def __str__(self):
        return super().__str__()[:-1] + f", ItemType.{self.item_type_ref}" + ")"


item_type_enum_entries = sorted(
    [
        EnumEntry(
            camel_case_name=obj["itemType"], friendly_name=obj["localized"]
        )
        for obj in (
            read(item_types_file)
            + [{"itemType": "attachment", "localized": "Attachment"}]
        )
    ]
)

field_enum_entries = sorted(
    [
        EnumEntry(camel_case_name=obj["field"], friendly_name=obj["localized"])
        for obj in (
            read(fields_file)
            + [
                {"field": "itemType", "localized": "Item Type"},
                {"field": "dateAdded", "localized": "Date Added"},
                {"field": "dateModified", "localized": "Modified"},
            ]
        )
    ]
)

creator_types_enum_entries = sorted(
    [
        CreatorTypeEnumEntry(
            item_type=item_type,
            camel_case_name=obj["creatorType"],
            friendly_name=obj["localized"],
        )
        for item_type, creators in read(creator_types_file).items()
        for obj in creators
    ]
)


attr_sep = ",\n"

source_code = f"""
// Generated by `scripts/generate_android_domain_model.py` on {datetime.now():%Y-%m-%d %H:%M:%S}
// using Zotero domain model downloaded on {download_timestamp}.

@file:Suppress("unused", "UNUSED_PARAMETER")

package net.tomasfiers.zoro.data.domain

import androidx.room.Entity
import androidx.room.PrimaryKey
import org.threeten.bp.OffsetDateTime

@Entity
data class Item(
    @PrimaryKey
    override val id: String,
    override var version: Long,
    override var name: String,
    var type: ItemType,
    var dateAdded: OffsetDateTime,
    var dateModified: OffsetDateTime,
{attr_sep.join([f"    var {field}: String?" for field in simple_fields])}
) : TreeItem

@Entity
data class Creator(
    @PrimaryKey(autoGenerate = true)
    val id: Int,
    var firstName: String?,
    var lastName: String?,
    var name: String?
)

enum class ItemType(camelCaseName: String, friendlyName: String) {{
{attr_sep.join(map(str, item_type_enum_entries))}
}}

enum class Field(camelCaseName: String, friendlyName: String) {{
{attr_sep.join(map(str, field_enum_entries))}
}}

enum class CreatorType(camelCaseName: String, friendlyName: String, itemType: ItemType) {{
{attr_sep.join(map(str, creator_types_enum_entries))}
}}
""".lstrip()
# Note double `{{` to escape `{` in f-string.

with open(android_domain_file, "w") as f:
    f.write(source_code)

print("Done")
